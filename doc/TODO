1) Вкладки для разных файлов
2) Дерево файлов по пути текущего открытого
3) Вкладки в одном окне имеют общую базу (слова, имена переменных, функций и т.д.)
4) Предлогать известные переменные (функции и т.д.) при вводе
5) Если файл уже открыт, то открывать только на чтение
6) Сохранение группы открытых вкладок и системы строк. Сохраняем в специальный файл, который можно открыть и прошлое состояние восстановится.
	Т.е. возможность сохранять и открывать "проект".
7) Выделять слово "TODO", "FIXME" и другие якоря
8) Информация привязана к строке, а не к ее номеру. Хранится в структурах вместе. (Например токены, позиции функций и т.п.)
9) Возможность пользователю (тот кто описывает язык) самому создавать вкладки в которых будут выведены найденные спец токены (ссылки на функции и т.п.)
10) Удалять лишние пробелы в конце строк. При сохранении, либо по команде.
11) При запуске(или в настройках) можно назначать номер, с которым будет асоциироваться канал pipe, куда можно отправлять данные для запущенной
	копии приложения. Например имя файла, который нужно открыть.
12) Разделить настройки на: (чтобы было понятно)
	12.1) текущая копия программы
	12.2) общие настройки
13) Позволять выбирать каталог для временных файлов, например: пункты 11 и 6 или истории операций.
14) В командной строке открывать группы файлов типа: *, *.c, somete*.txt и т.п.

Строки.
1) Строки хранятся в двунаправленном списке
2) Для ускорения перехода к строке по номеру, вводятся группы (например по 500 строк)
	2.1) Группа - это указатель на строку, входящую в эту группу и являющейся первой в ней
	Например, есть 2000 строк. 4 группы по 500. Т.е Строка 1 - первая группа, 501 - вторая, 1001 - третья и т.д.
	2.2) Для оптимизации, при поиске строки, использовать начало и конец группы в зависимости от расстояния до искомого номера.
	Например, есть 2000 строк. 4 группы по 500. Для поиска строки 256 обращаемся в первую группу, но так как 256 ближе к 500, и дальше от 1, то поиск начнется от строки 500 в сторону уменьшения (500 -> 256)
	2.3) Деление на группы в зависимости от общего кол-ва строк. Т.е. размер группы будет зависеть от общего кол-ва строк.
	Например, отношения 9999/50, 99999/500, 999999/5000. В данных случаях ускорение будет в 200 раз.
	2.4) Динамическое изменение количества и размеров групп во время редактирования.


Настройки разбора текста (языков программирования).
1) Настройки хранятся в xml.
	<token "идентификатор токена" "приоритет от 1 до 200">
		<word>регулярное выражение, будет идентифицироваться с токеном</word>
		<word***
		<word>регулярное выражение, будет идентифицироваться с токеном</word>
		
		<tree>
			<word>регулярное выражение, для "отсеивания" данных из токена</word>
		</tree>
		
		<tab "идентификатор вкладки">
			<word>регулярное выражение, для "отсеивания" данных из токена</word>
		</tab>
		<tab***
		<tab "идентификатор вкладки">
			<word>регулярное выражение, для "отсеивания" данных из токена</word>
		</tab>
		
		<color "тип данных: rgb, hex и т.д.">данные описывающие цвет</color>
		
		<format>"формат текста одной буквой: B, I, U и т.п""пример" BU</format>
	</token>
2) У каждого токена есть приоритет, при совпадении токенов, выберется тот, что с высшим приоритетом. 
	Если приоритеты равны, выберется последний совпавший.
3) Опции токена:
	3.1) (НЕНУЖНО)вывод токена в отдельное окно (например для списка функций), нужен id(или имя) вкладки. Окон может быть сколько угодно.
	3.2) добавить в список предложений (префиксное дерево) при вводе (например для имени типа или структуры или функции)
		3.2.1) список символов-разделителей (чтобы всю найденую строку не добавлять)
4) Можно сделать обработчик отдельной библиотекой, подключая ее на горячую.
5) Можно описывать вкладки (см пункт 9 в главном верхнем списке)
	Примерный вид.
	<tab "идентификатор вкладки" "заголовок вкладки" "порядок в вкладках"/>
		
История операций.
1) Сохранять состояние перед каждым изменением.
2) Состояние сохраняется в файл (например xxx.xxx.history) в бинарном виде
3) Состояние файла - это строки. В истории хранятся полные копии изменяемых строк. После строк (после одного коммита - сохранения) хранится структура константного размера.
	В структуре содержиться информация о сохранении. Например позиция данных сохранения в файле истории (откуда читать) и размер этих данных (либо кол-во строк).
	3.1) Вести две истории: история изменений и история отмены изменений.
		Т.е. в историю изменений сохраняется состояние перед изменением, а в историю отмены сохраняется состояние файла перед отменой
4) Предоставить пользователю выбор: не вести историю - удалять историю после закрытия файла - не удалять историю после закрытия (т.е. открыв файл, можно восстанавливать состояния)
5) Предоставить пользователю выбор дирректории для сохранения истории (например рядом с открытым файлом, или в папке этой программы)